{"version":3,"sources":["App.module.css","Components/Task/Task.tsx","Components/AddItemForm/AddItemForm.tsx","store/tasks-reducer.ts","Components/Todolist/Todolist.tsx","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx","Components/Todolist/Todolist.module.css"],"names":["module","exports","Task","props","className","task","isDone","type","checked","onChange","changeTaskStatus","id","title","onClick","removeTask","AddItemForm","useState","setTitle","error","setError","placeholder","value","e","currentTarget","onKeyPress","charCode","trim","addItem","initialState","Todolist","dispatch","useDispatch","tasks","useSelector","state","s","todolist_section","header","addTaskAC","tasks_list","map","t","taskId","length","footer","App","app","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","stateCopy","filter","v1","store","createStore","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce985b47.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__29g1Z\",\"title\":\"App_title__3rsy1\"};","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {TaskType} from '../Todolist/Todolist'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    changeTaskStatus: (id: string, isDone: boolean) => void\r\n    removeTask: (taskId: string) => void\r\n}\r\n\r\nexport const Task = (props: TaskPropsType) => {\r\n\r\n    return <div key={props.task.id} className={props.task.isDone ? 'is-done' : ''}>\r\n\r\n\r\n        <input type=\"checkbox\" checked={props.task.isDone}\r\n               onChange={() => props.changeTaskStatus(props.task.id, props.task.isDone)}/>\r\n        <span>{props.task.title}</span>\r\n        <button onClick={() => props.removeTask(props.task.id)}>\r\n            x\r\n        </button>\r\n    </div>\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = (props: AddItemFormPropsType) => {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n\r\n    return <div>\r\n        <input type=\"text\" placeholder={'What needs to be done?'} value={title} onChange={onChangeHandler}\r\n               onKeyPress={onKeyPressHandler}/>\r\n    </div>\r\n}\r\n","import {v1} from \"uuid\";\r\nimport {TasksStateType, TaskType} from \"../Components/Todolist/Todolist\";\r\n\r\n\r\ntype ActionType =\r\n    RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n\r\nexport type RemoveTaskActionType = {  type: 'REMOVE-TASK', taskId: string }\r\n\r\nexport type AddTaskActionType = { type: 'ADD-TASK', title: string}\r\n\r\nexport type ChangeTaskStatusActionType = { type: 'CHANGE-TASK-STATUS', taskId: string, isDone: boolean }\r\n\r\n\r\nconst initialState: TasksStateType = []\r\n\r\n\r\nexport const tasksReducer = (state = initialState, action: ActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            let stateCopy = [...state]\r\n            let tasks = stateCopy\r\n            stateCopy = tasks.filter((t: TaskType) => t.id !== action.taskId);\r\n\r\n            return stateCopy\r\n        }\r\n        case 'ADD-TASK': {\r\n            let task: TaskType = {id: v1(), title: action.title, isDone: false}\r\n            let stateCopy = [...state]\r\n            stateCopy = [task, ...stateCopy]\r\n            return stateCopy\r\n        }\r\n\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let stateCopy =[...state]\r\n            let tasks = stateCopy\r\n            stateCopy = tasks.map( (t: TaskType) => t.id === action.taskId ? {...t, isDone: action.isDone} : t)\r\n            return stateCopy\r\n        }\r\n        default:\r\n\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const removeTaskAC = (taskId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId: taskId}\r\n}\r\nexport const addTaskAC = (title: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', title: title}\r\n}\r\n\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean): ChangeTaskStatusActionType => {\r\n    return {\r\n        type: \"CHANGE-TASK-STATUS\",\r\n        taskId: taskId,\r\n        isDone: isDone\r\n    }\r\n}\r\n\r\n","import React from 'react'\r\nimport s from './Todolist.module.css';\r\nimport {Task} from \"../Task/Task\";\r\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from '../../store/store';\r\nimport {addTaskAC, changeTaskStatusAC, removeTaskAC} from \"../../store/tasks-reducer\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type TasksStateType = Array<TaskType>\r\n\r\n\r\nexport const Todolist = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const tasks = useSelector<AppRootState, Array<TaskType>>(state => state.tasks)\r\n\r\n\r\n    return <div className={s.todolist_section}>\r\n        <div className={s.header}>\r\n            <AddItemForm addItem={(title) => dispatch(addTaskAC(title))}/>\r\n        </div>\r\n        <div className={s.tasks_list}>\r\n            {\r\n                tasks.map(t => {\r\n                        return <Task key={t.id} task={t} removeTask={() => dispatch(removeTaskAC(t.id))}\r\n                                     changeTaskStatus={() => dispatch(changeTaskStatusAC(t.id, !t.isDone))}/>\r\n                    }\r\n                )\r\n\r\n            }\r\n        </div>\r\n        <div>\r\n            { tasks.length  > 0   && <div className={s.footer}>\r\n                {tasks.length} items  lefts\r\n                </div>}\r\n\r\n        </div>\r\n\r\n\r\n    </div>\r\n}","import React from 'react';\nimport s from './App.module.css';\nimport {Todolist} from \"./Components/Todolist/Todolist\";\n\nfunction App() {\n  return (\n      <div className={s.app}>\n          <h1 className={s.title}>Todos</h1>\n        <Todolist/>\n      </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from \"redux\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    tasks: tasksReducer\r\n})\r\n\r\nexport type AppRootState = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolist_section\":\"Todolist_todolist_section__1Ya9p\",\"header\":\"Todolist_header__3uf09\"};"],"sourceRoot":""}